const postgres = require('pg')
require('dotenv').config()

class PostgresPlugin {
  constructor () {
    this.configPostgres()
  }

  async configPostgres () {
    // Initialize connection to Postgres
    const client = new postgres.Client({
      user: process.env.PG_USER,
      host: process.env.PG_HOST,
      database: process.env.PG_DATABASE,
      password: process.env.PG_PASSWORD,
      port: process.env.PG_PORT
    })
    this.postgresClient = client
    this.postgresTableName = process.env.PG_TABLE
    // Connect to the database
    return new Promise((resolve, reject) => {
      client.connect()
        .then(() => {
          // Call the function to create the table
          createTable(this.postgresTableName)
          resolve()
        })
        .catch(err => {
          console.error('Error connecting to the database:', err)
          reject(err)
        })
    })

    // Function to create the table
    function createTable (tableName) {
      // We use JSONB (binary JSON format of Postgres) to store objects
      const createTableQuery = `
        CREATE TABLE IF NOT EXISTS ${tableName} (
          id SERIAL PRIMARY KEY,
          data JSONB
        );
      `
      return new Promise((resolve, reject) => {
        client.query(createTableQuery)
          .then(() => {
            resolve()
          })
          .catch(error => {
            reject(error)
          })
      })
    }
  }

  // Function to insert a JavaScript object by key
  // Returns the id generated by the database
  async store (object, options) {
    try {
      const query = `INSERT INTO ${this.postgresTableName} (data) VALUES ($1)  RETURNING id;`
      const result = await this.postgresClient.query(query, [object])
      if (result.rowCount > 0) {
        return result.rows[0].id
      } else {
        return null
      }
    } catch (error) {
      console.error('Error inserting object:', error)
    }
  }

  // Function to retrieve a JavaScript object by key
  async retrieve (key, options) {
    try {
      const query = `SELECT data FROM ${this.postgresTableName} WHERE id = $1`
      const result = await this.postgresClient.query(query, [key])
      if (result.rows.length > 0) {
        return result.rows[0].data
      } else {
        console.log('No object found with the specified key')
        return null
      }
    } catch (error) {
      console.error('Error retrieving object:', error)
      return null
    }
  }
}

module.exports = PostgresPlugin
